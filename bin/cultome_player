#!/usr/bin/env ruby
$LOAD_PATH.unshift(File.join(File.dirname(File.expand_path(__FILE__)), '../lib'))

require 'optparse'
require 'cultome_player'

options = {
  interactive: false,
  environment: :user,
  signal: false,
}

parser = OptionParser.new do |opts|
  opts.banner = "Usage: cultome_player [options] [file1, file2, ...]"

  opts.on('-i', '--interactive', 'Starts the player in interactive mode. [false]') do
    options[:interactive] = true
  end

  opts.on('-e', '--env ENV', 'Select settings from environment. [user]') do |env|
    options[:environment] = env.to_sym
  end

  opts.on('-s', '--signal SIG', 'Send a command to all the command pipes.') do |sig|
    options[:signal] = sig.gsub(/"/, "")
  end

  opts.on('--version', "Shows version") do
    puts CultomePlayer::VERSION
    exit
  end

end

ARGV << "--help" if ARGV.empty?

# parseamos las opciones
parser.parse!(ARGV)

if options[:interactive]
  player = CultomePlayer.get_player(options[:environment])
  player.begin_session
elsif options[:signal]
  begin
    include CultomePlayer::Environment
    config = load_environment_properties(options[:environment])
    puts "[*] Writing to signal '#{options[:signal]}' to pipe '#{config["command_pipe"]}'"
    open(config["command_pipe"], File::WRONLY | File::NONBLOCK | File::SYNC){|out| out.puts options[:signal]}
  rescue Errno::ENXIO, Errno::ENOENT => e
  end
end
